package BlackRock;

class ListNode<T>{
	private T value;
	private ListNode next;
	
	public ListNode(T value, ListNode next){
		this.value = value;
		this.next = next;
	}
	
	public ListNode(T value){
		this.value = value;
	}

	public T getValue() {
		return this.value;
	}

	public void setValue(T value) {
		this.value = value;
	}

	public ListNode getNext() {
		return this.next;
	}

	public void setNext(ListNode next) {
		this.next = next;
	}
}
public class LinkedListGeneric<T> {
	private ListNode head;
	private int size;
	
	public LinkedListGeneric(T value){
		this.head = new ListNode(value);
		this.size = 0;
	}
	
	public LinkedListGeneric(){
		this.head = null;
		this.size = 0;
	}
	
	public void TraverseList(){
		ListNode curr = this.head;
		while(curr!= null)
			System.out.print(curr.getValue()+"->");
	}
	
	public void insert(T value){
		if(this.head == null){
			this.head = new ListNode(value);
			this.size++;
		}else{
			ListNode curr = this.head;
			while(curr.getNext()!=null)
				curr = curr.getNext();
			curr.setNext(new ListNode(value));
			this.size++;
		}
	}
	
	public void deleteAtPosition(int i){
		if(i>this.size)
			throw new Exception("Outside bounds");
	}

}
