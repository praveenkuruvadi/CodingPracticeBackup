package com.dc.lab1;

import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class clientThread implements Runnable{
	private static String nodeId;
	private static Map<String,Integer> edgesToNeighbors;
	private static int roundNumber;
	
	public clientThread(String nodeId, List<String> nodeList, List<Integer> edgeList){
		this.nodeId = nodeId;
		this.edgesToNeighbors = new HashMap<String,Integer>();
		for(int i =0;i< nodeList.size();i++){
			edgesToNeighbors.put(nodeList.get(i), edgeList.get(i));
		}
		writeLog("Thread initialized");
		roundNumber =0;
	}

	@Override
	public void run() {
		writeLog("Thread starting");
		while(!Master.getEndOperation()){
			writeLog("Thread round:"+ roundNumber+" Global round:"+Master.getCurrentGlobalRound());
			System.out.println(nodeId+" round:"+roundNumber+" Global round:"+Master.getCurrentGlobalRound());
			try {
				Thread.currentThread().sleep(100);
			} catch (InterruptedException e) {
				System.out.println("Fail 1");
				writeLog("Thread sleep failed at round:"+roundNumber);
			}
			
			Master.setPermissions(nodeId);
			
			
			System.out.println(nodeId+" setting into next");
			while(!goToNextRound()){
				try {
					//System.out.println(nodeId+ " wait3");
					Thread.currentThread().sleep(5);
				} catch (InterruptedException e) {
					System.out.println("Fail 2");
					writeLog("Thread sleep failed at round:"+roundNumber);
				}
			}
			
			Master.setIntoNextRound(nodeId);
			
			roundNumber++;
		}
		writeLog("Program ended");
	}
	
	private boolean goToNextRound(){
		if(Master.getProceedToNextRound())
			return true;
		return false;
	}
	
	private void writeLog(String msg) {
		Writer writer;
		try {
			FileOutputStream FoutStream = new FileOutputStream(
					"outputFiles/threadFile" + nodeId + ".txt", true);
			try {
				writer = new BufferedWriter(
						new OutputStreamWriter(FoutStream, "UTF-8"));
				writer.append(msg);
				writer.append("\n");
				writer.close();
			} catch (IOException ioe) {
				ioe.printStackTrace();
			} finally {
				FoutStream.close();
			}
		} catch (Exception e) {
		}
	}


}
