package BlackRock;

import java.util.Stack;

public class BSTIterator {
	class TreeNode{
		int val;
		 *     TreeNode left;
		 *     TreeNode right;
		 *     TreeNode(int x) { val = x; }
	}
    Stack<TreeNode> stack = new Stack<TreeNode>();
    public BSTIterator(TreeNode root) {
        while(root!=null){
            stack.push(root);
            root = root.left;
        }
    }

    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        return !stack.isEmpty();
    }

    /** @return the next smallest number */
    public int next() {
        TreeNode out = stack.pop();
        int output = out.val;
        if(out.right != null){
            out = out.right;
            while(out!=null){
                stack.push(out);
                out = out.left;
            }
        }
        return output;
    }
}
